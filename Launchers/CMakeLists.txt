# Compile time parameters for the CTL shortest path algorithm
set(CTL_THETA "" CACHE STRING "Choose the maximum size of truncated subtrees in TruncatedTreeLabelling.")
set(CTL_SIMD_LOGK "" CACHE STRING "Choose the maximum number of elements per vector for SIMD in TruncatedTreeLabelling.")
option(CTL_USE_PERFECT_CUSTOMIZATION "Use perfect customization in CCH on which CTL is based." OFF)
#option(CTL_STORE_PATH_POINTERS "Store parent pointers in CTL to allow path retrieval." ON)
set(VAL_CTL_THETA 0)
if(NOT CTL_THETA STREQUAL "")
  set(VAL_CTL_THETA ${CTL_THETA})
endif()
set(VAL_CTL_SIMD_LOGK 0)
if(NOT CTL_SIMD_LOGK STREQUAL "")
  set(VAL_CTL_SIMD_LOGK ${CTL_SIMD_LOGK})
endif()
set(VAL_CTL_USE_PERFECT_CUSTOMIZATION "false")
if (CTL_USE_PERFECT_CUSTOMIZATION)
  set(VAL_CTL_USE_PERFECT_CUSTOMIZATION "true")
endif()
#set(VAL_CTL_STORE_PATH_POINTERS "true")
#if (NOT CTL_STORE_PATH_POINTERS)
#  set(VAL_CTL_STORE_PATH_POINTERS "false")
#endif()

# AssignTraffic target
add_executable(AssignTraffic AssignTraffic.cc)
target_compile_definitions(AssignTraffic PRIVATE CSV_IO_NO_THREAD)
target_compile_options(AssignTraffic PRIVATE ${FULL_WARNINGS})
# target_include_directories(AssignTraffic PRIVATE ${Boost_INCLUDE_DIR})
target_link_libraries(AssignTraffic Boost::boost routingkit kassert vectorclass fast_cpp_csv_parser)
target_link_libraries(AssignTraffic ctlsa) # external CTL standalone implementation


if((NUM_THREADS GREATER 1) AND OpenMP_FOUND)
  message("Linking openmp to AssignTraffic target.")
  target_link_libraries(AssignTraffic OpenMP::OpenMP_CXX)
  target_compile_definitions(AssignTraffic PRIVATE NUM_THREADS=${NUM_THREADS})
else()
  target_compile_definitions(AssignTraffic PRIVATE NUM_THREADS=1)
endif()

option(TA_USE_CFW "Make each descent direction conjugate to the last direction." ON)
option(TA_USE_SIMD_SEARCH "Use SIMD optimizations for the centralized shortest-path search." ON)
set(TA_LOG_K "" CACHE STRING "Choose the number of simultaneous shortest-path computations.")

if(NOT TA_USE_CFW)
  target_compile_definitions(AssignTraffic PRIVATE TA_NO_CFW)
endif()
if(NOT TA_USE_SIMD_SEARCH)
  target_compile_definitions(AssignTraffic PRIVATE TA_NO_SIMD_SEARCH)
endif()
if(NOT TA_LOG_K STREQUAL "")
  target_compile_definitions(AssignTraffic PRIVATE TA_LOG_K=${TA_LOG_K})
endif()
target_compile_definitions(AssignTraffic PRIVATE CTL_THETA=${VAL_CTL_THETA})
target_compile_definitions(AssignTraffic PRIVATE CTL_SIMD_LOGK=${VAL_CTL_SIMD_LOGK})
target_compile_definitions(AssignTraffic PRIVATE CTL_USE_PERFECT_CUSTOMIZATION=${VAL_CTL_USE_PERFECT_CUSTOMIZATION})
#target_compile_definitions(AssignTraffic PRIVATE CTL_STORE_PATH_POINTERS=${VAL_CTL_STORE_PATH_POINTERS})


# CalculateDemand target
add_executable(
    CalculateDemand CalculateDemand.cc
    ../External/randomc/mersenne.cpp ../External/randomc/userintf.cpp ../External/stocc/stoc1.cpp)
target_compile_definitions(CalculateDemand PRIVATE CSV_IO_NO_THREAD)
target_link_libraries(CalculateDemand ${PROJ_LIBRARY} ${RoutingKit_LIBRARY})
if(OpenMP_FOUND)
  target_link_libraries(CalculateDemand OpenMP::OpenMP_CXX)
endif()

set(DC_MAX_NUM_SOURCES "" CACHE STRING "Choose the number of sources to be substituted in FRAD.")
if(NOT DC_MAX_NUM_SOURCES STREQUAL "")
  target_compile_definitions(CalculateDemand PRIVATE DC_MAX_NUM_SOURCES=${DC_MAX_NUM_SOURCES})
endif()

# RunP2PAlgo target
add_executable(RunP2PAlgo RunP2PAlgo.cc)
target_compile_definitions(RunP2PAlgo PRIVATE CSV_IO_NO_THREAD)
target_compile_options(RunP2PAlgo PRIVATE ${FULL_WARNINGS})
target_link_libraries(RunP2PAlgo routingkit kassert vectorclass fast_cpp_csv_parser)
target_link_libraries(RunP2PAlgo ctlsa) # external CTL standalone implementation
target_compile_definitions(RunP2PAlgo PRIVATE CTL_THETA=${VAL_CTL_THETA})
target_compile_definitions(RunP2PAlgo PRIVATE CTL_SIMD_LOGK=${VAL_CTL_SIMD_LOGK})
target_compile_definitions(RunP2PAlgo PRIVATE CTL_USE_PERFECT_CUSTOMIZATION=${VAL_CTL_USE_PERFECT_CUSTOMIZATION})
#target_compile_definitions(RunP2PAlgo PRIVATE CTL_STORE_PATH_POINTERS=${VAL_CTL_STORE_PATH_POINTERS})
if(OpenMP_FOUND)
  target_link_libraries(RunP2PAlgo OpenMP::OpenMP_CXX)
endif()

option(USE_FAST_ELIMINATION_TREE_QUERY "Use the fast elimination tree query." ON)
if(NOT USE_FAST_ELIMINATION_TREE_QUERY)
  target_compile_definitions(RunP2PAlgo PRIVATE NO_FAST_ELIMINATION_TREE_QUERY)
endif()

# RunPoiAlgo target
add_executable(RunPoiAlgo RunPoiAlgo.cc)
target_link_libraries(RunPoiAlgo ${RoutingKit_LIBRARY})
if(OpenMP_FOUND)
  target_link_libraries(RunPoiAlgo OpenMP::OpenMP_CXX)
endif()
